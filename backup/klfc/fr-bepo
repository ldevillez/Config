// Generated by KLFC 1.5.5
// https://github.com/39aldo39/klfc

default
xkb_symbols "basic" {
    key <NMLK> { [     Num_Lock ],
                 actions[Group1] = [ LockMods(mods=NumLock) ],
                 vmods=NumLock };
    key <KPEN> { [     KP_Enter ] };
    key <KPEQ> { [     KP_Equal ] };
    key <KPDV> { [    KP_Divide,        U2215,     division,   VoidSymbol ] };
    key <KPMU> { [  KP_Multiply,        U22C5,     multiply,   VoidSymbol ] };
    key <KPSU> { [  KP_Subtract,        U2212,        U2212,   VoidSymbol ] };
    key <KPAD> { [       KP_Add,         plus,         plus,   VoidSymbol ] };
    key <KP7> { [      KP_Home,         KP_7,        U2196,        U21D6 ] };
    key <KP8> { [        KP_Up,         KP_8,      uparrow,        U21D1 ] };
    key <KP9> { [     KP_Prior,         KP_9,        U2197,        U21D7 ] };
    key <KP4> { [      KP_Left,         KP_4,    leftarrow,        U21D0 ] };
    key <KP5> { [     KP_Begin,         KP_5,        U2194,     ifonlyif ] };
    key <KP6> { [     KP_Right,         KP_6,   rightarrow,      implies ] };
    key <KP1> { [       KP_End,         KP_1,        U2199,        U21D9 ] };
    key <KP2> { [      KP_Down,         KP_2,    downarrow,        U21D3 ] };
    key <KP3> { [      KP_Next,         KP_3,        U2198,        U21D8 ] };
    key <KP0> { [    KP_Insert,         KP_0,        U2195,        U21D5 ] };
    key <KPDL> { [    KP_Delete,       period,        comma,        U202F ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <TLDE> { [       dollar,   numbersign,       endash,    paragraph, Pointer_EnableKeys ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), LockControls(ctrls=MouseKeys) ] };
    key <AE01> { [     quotedbl,            1,       emdash, doublelowquotemark,           F1 ] };
    key <AE02> { [ guillemotleft,            2,         less, leftdoublequotemark,           F2 ] };
    key <AE03> { [ guillemotright,            3,      greater, rightdoublequotemark,           F3 ] };
    key <AE04> { [    parenleft,            4,  bracketleft, lessthanequal,           F4 ] };
    key <AE05> { [   parenright,            5, bracketright, greaterthanequal,           F5 ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_EXTEND";
    key <AE06> { [           at,            6,  asciicircum,           F6 ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AE07> { [         plus,            7,    plusminus,      notsign,           F7 ] };
    key <AE08> { [        minus,            8,        U2212,   onequarter,           F8 ] };
    key <AE09> { [        slash,            9,     division,      onehalf,           F9 ] };
    key <AE10> { [     asterisk,            0,     multiply, threequarters,          F10 ] };
    key <AE11> { [        equal,       degree,     notequal,      minutes,          F11 ] };
    key <AE12> { [      percent,        grave,     permille,      seconds,          F12 ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AD01> { [            b,            B,          bar,    brokenbar,       Escape ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_SHIFT+EXTEND_ALPHABETIC";
    key <AD02> { [       eacute,       Eacute,   dead_acute, dead_doubleacute,   Pointer_Up, XF86ScrollUp ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), MovePtr(x=+0,y=-8), PtrBtn(button=4) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AD03> { [            p,            P,    ampersand,      section,     XF86Back ] };
    key <AD04> { [            o,            O,           oe,           OE,  XF86Forward ] };
    key <AD05> { [       egrave,       Egrave,   dead_grave,        grave, Pointer_Button1 ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), PtrBtn(button=1) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_EXTEND_ALPHABETIC";
    key <AD06> { [ dead_circumflex,       exclam,   exclamdown, a] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_EXTEND_ALPHABETIC";
    key <AD07> { [            v,            V,   dead_caron,         Home ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AD08> { [            d,            D,          eth,          ETH,           Up ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_EXTEND_ALPHABETIC";
    key <AD09> { [            l,            L,  dead_stroke,          End ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AD10> { [            j,            J,        U0133,        U0132,       Delete ] };
    key <AD11> { [            z,            Z,        schwa,        SCHWA,       Escape ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AD12> { [            w,            W,       Insert ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_SHIFT+EXTEND_ALPHABETIC";
    key <AC01> { [            a,            A,           ae,           AE, Pointer_Left, XF86ScrollLeft ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), MovePtr(x=-8,y=+0), PtrBtn(button=7) ] };
    key <AC02> { [            u,            U,       ugrave,       Ugrave, Pointer_Down, XF86ScrollDown ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), MovePtr(x=+0,y=+8), PtrBtn(button=5) ] };
    key <AC03> { [            i,            I, dead_diaeresis, dead_abovedot, Pointer_Right, XF86ScrollRight ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), MovePtr(x=+8,y=+0), PtrBtn(button=6) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AC04> { [            e,            E,     EuroSign, dead_currency,    Control_L ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), SetMods(mods=Control) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AC05> { [        comma,    semicolon, rightsinglequotemark,    dead_horn, Pointer_Button3 ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), PtrBtn(button=3) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR__EXTEND_ALPHABETIC";
    key <AC06> { [            c,            C,    copyright,         Next ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AC07> { [            t,            T,        thorn,        THORN,         Left ] };
    key <AC08> { [            s,            S,       ssharp,        U1E9E,         Down ] };
    key <AC09> { [            r,            R,   registered,    trademark,        Right ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_EXTEND_ALPHABETIC";
    key <AC10> { [            n,            N,   dead_tilde,    BackSpace ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AC11> { [            m,            M,  dead_macron,    masculine,         Menu ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_SHIFT+EXTEND_ALPHABETIC";
    key <BKSL> { [     ccedilla,     Ccedilla, dead_cedilla, dead_belowcomma, XF86Favorites, XF86MyComputer ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), NoAction(), Redirect(key=<I165>,clearMods=Shift) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_ALPHABETIC";
    key <LSGT> { [  ecircumflex,  Ecircumflex,        slash ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_EXTEND_ALPHABETIC";
    key <AB01> { [       agrave,       Agrave,    backslash,            z ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<AB01>,mods=Control) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AB02> { [            y,            Y,    braceleft, leftsinglequotemark,            x ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), Redirect(key=<AB02>,mods=Control) ] };
    key <AB03> { [            x,            X,   braceright, rightsinglequotemark,            c ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), Redirect(key=<AB03>,mods=Control) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AB04> { [       period,        colon,     ellipsis, periodcentered,            v ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), Redirect(key=<AB04>,mods=Control) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_EXTEND_ALPHABETIC";
    key <AB05> { [            k,            K,   asciitilde,            a ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<AB05>,mods=Control) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AB06> { [   apostrophe,     question, questiondown,    dead_hook, Pointer_Button2 ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), PtrBtn(button=2) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AB07> { [            q,            Q, dead_abovering, dead_belowdot, Pointer_Button3 ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), PtrBtn(button=3) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_EXTEND_ALPHABETIC";
    key <AB08> { [            g,            G,   dead_greek, Pointer_Left ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), MovePtr(x=-8,y=+0) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AB09> { [            h,            H,       dagger, doubledagger, Pointer_Right ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), NoAction(), MovePtr(x=+8,y=+0) ] };
    key <AB10> { [            f,            F,  dead_ogonek,  ordfeminine,    Multi_key ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <SPCE> { [        space, nobreakspace,   underscore,        U202F,       Return ] };
    key.type[Group1] = "NONE_EXTEND";
    key <ESC> { [       Escape,    Caps_Lock ],
                 actions[Group1] = [ NoAction(), LockMods(mods=Lock) ] };
    key.type[Group1] = "NONE_EXTEND_SHIFT+EXTEND";
    key <FK01> { [           F1, XF86AudioPlay, XF86AudioPause ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I209>,clearMods=Shift) ] };
    key <FK02> { [           F2, XF86AudioPrev, XF86AudioRewind ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I176>,clearMods=Shift) ] };
    key <FK03> { [           F3, XF86AudioNext, XF86AudioForward ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I216>,clearMods=Shift) ] };
    key <FK04> { [           F4, XF86AudioStop,    XF86Eject ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I169>,clearMods=Shift) ] };
    key <FK05> { [           F5, XF86AudioMute,   XF86Reload ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I181>,clearMods=Shift) ] };
    key <FK06> { [           F6, XF86AudioLowerVolume, XF86MonBrightnessDown ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I237>,clearMods=Shift) ] };
    key <FK07> { [           F7, XF86AudioRaiseVolume, XF86MonBrightnessUp ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I238>,clearMods=Shift) ] };
    key <FK08> { [           F8, XF86AudioMedia,    XF86Sleep ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I150>,clearMods=Shift) ] };
    key <FK09> { [           F9, XF86HomePage,      XF86WWW ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I158>,clearMods=Shift) ] };
    key <FK10> { [          F10,   XF86Search,     XF86Mail ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I163>,clearMods=Shift) ] };
    key <FK11> { [          F11, XF86Explorer,  XF86Launch1 ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I156>,clearMods=Shift) ] };
    key <FK12> { [          F12, XF86Calculator,  XF86Launch2 ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I157>,clearMods=Shift) ] };
    key.type[Group1] = "ONE_LEVEL";
    key <CAPS> { [ ISO_Level5_Shift ],
                 actions[Group1] = [ SetMods(mods=LevelFive) ],
                 vmods=LevelFive };
    modifier_map Mod3 { ISO_Level5_Shift };
    include "level3(ralt_switch)"
};
